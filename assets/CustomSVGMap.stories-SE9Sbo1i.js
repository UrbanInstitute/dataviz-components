import{p as G,f as u,a as v,c as i,s as a,t as V,b as l,d as M,e as h,g as S,h as w}from"./iframe-BcferWuU.js";import{i as E}from"./lifecycle-BcSUtK95.js";import{c as A,d as U}from"./create-runtime-stories-CHM6HO4D.js";import"./BasicDropdown-DJMtB7rs.js";import"./Block-UHg9Sqz9.js";import"./DatawrapperIframe-BBFhdL5B.js";import"./HeadingAlt-CQdogqxm.js";import"./IconPlus-DHJ6oWZ1.js";import"./IconMinus-qSL_4EAI.js";import"./IconClose-CVA51IW5.js";import"./IconSearch-D1KDxOeC.js";import"./LogoTPCBadge-DKzhnvIQ.js";import"./LogoUrbanBadge-Cb9tDsVo.js";import"./LogoUrbanAnimated-D8omdrsf.js";import"./LogoUrban-U4qo6VZS.js";import"./LogoUrbanWide-CRaXJYQ5.js";import"./Navbar-CS-fQRTa.js";import"./ProjectCredits-l_sM_Qec.js";import"./ReturnTop-BE8IcWbw.js";import"./Scorecard-CR05xbEU.js";import"./SocialShare-U1Ocdmw1.js";import"./TextBlock-BxLnvGMM.js";import"./Button-CeUI2gWw.js";import{C as z}from"./ChartBlock-KwUWCXmq.js";import"./Meta-DghlXPRk.js";import"./Toggle-DP_Mulpl.js";import"./Scrolly-DjWM9j51.js";import"./Analytics-BG00URCE.js";import"./Headline-7NrMcj5C.js";import"./PymChild-CDrv53av.js";import"./LoadingWrapper-CpRnKu88.js";import"./Tooltip-CvVxsiFy.js";import"./AxisY-L_iQ3sGL.js";import"./AxisX-Cg_Oy-fJ.js";import{S as W}from"./lib-Bn4Zx1sO.js";import{S as B}from"./SVGPolygonLayer-DuesFm5J.js";import{S as Q}from"./SVGPointLayer-DlTJGiaY.js";import{S as R}from"./SVGLabelLayer-CfmkC-0-.js";import{C as j}from"./ColorLegend-D8QsiFqQ.js";import{c as F,u as I,q as N}from"./us_cities-CajzjfHN.js";import{u as s}from"./urbanColors-BkxYcPwH.js";import"./each-CZjc6dyk.js";import"./attributes-1snxx-6i.js";import"./attributes-q36Eg1F8.js";import"./class-B9SFUanI.js";import"./style-CNURdi_Z.js";import"./misc-Axxag6g7.js";import"./html-D3p32zG5.js";import"./this-XyIzL1DC.js";import"./svelte-head-CT8so-b2.js";import"./window-SIeXCKpW.js";import"./string-D6zLExca.js";import"./linear-DqoPPvqX.js";import"./index-_doEQLKC.js";import"./quantile-DvKURRLJ.js";const D={title:"Examples/Stories/CustomSVGMap"},{Story:O}=U();var H=u("<!> <!> <!>",1),J=u('<div slot="tooltip"><h5> </h5> <p>Air quality index: <strong> </strong></p></div>'),K=u('<div style="max-width: 300px; margin: 1em auto 0;"><!></div> <!>',1);function C(x,b){G(b,!1);const d=topojson.feature(F,"county_air_quality"),_=topojson.feature(I,"us_cities");let f=N().domain(d.features.map(n=>n.properties.index_air_quality)).range(s.getDivergingColors());E(),O(x,{name:"Primary",children:(n,X)=>{z(n,{title:"Air quality index by U.S. county",source:"Urban Institute Upward Mobility Framework",children:(k,Y)=>{var c=K(),y=v(c),q=i(y);j(q,{get scale(){return f},height:10,tickLineColor:"white",tickLineWidth:"2"});var L=a(y,2);W(L,{zoomable:!0,get features(){return d.features},aspectRatio:4/2.5,tooltipContainParent:!0,children:(p,g)=>{var t=H(),r=v(t);B(r,{fill:o=>f(o.properties.index_air_quality),get hoverStroke(){return s.magenta},hoverStrokeWidth:2,tooltip:!0,get stroke(){return s.gray_shade_dark}});var e=a(r,2);Q(e,{get features(){return _.features},pointerEvents:!1,get fill(){return s.gray_shade_lighter}});var m=a(e,2);R(m,{get features(){return _.features},getLabel:o=>o.properties.name,fontSize:13,pointerEvents:!1}),l(p,t)},$$slots:{default:!0,tooltip:(p,g)=>{var t=J();const r=w(()=>g.props);var e=i(t),m=i(e),o=a(e,2),$=a(i(o)),P=i($);V(()=>{h(m,`${S(r).NAME??""} county`),h(P,S(r).index_air_quality)}),l(p,t)}}}),l(k,c)},$$slots:{default:!0}})},$$slots:{default:!0},parameters:{__svelteCsf:{rawCode:`<undefined {...args}>
   <ChartBlock title="Air quality index by U.S. county" source="Urban Institute Upward Mobility Framework">
<div style="max-width: 300px; margin: 1em auto 0;">
	<ColorLegend scale={airQualityScale} height={10} tickLineColor={"white"} tickLineWidth="2" />
</div>
<SVGMap zoomable features={county_air_quality.features} aspectRatio={4 / 2.5} tooltipContainParent={true}>
	<SVGPolygonLayer fill={(d) => airQualityScale(d.properties.index_air_quality)} hoverStroke={urbanColors.magenta} hoverStrokeWidth={2} tooltip stroke={urbanColors.gray_shade_dark} />
	<SVGPointLayer features={us_cities_geo.features} pointerEvents={false} fill={urbanColors.gray_shade_lighter} />
	<SVGLabelLayer features={us_cities_geo.features} getLabel={(d) => d.properties.name} fontSize={13} pointerEvents={false} />
	<div slot="tooltip" let:props>
		<h5>{props.NAME} county</h5> <p>Air quality index: <strong>{props.index_air_quality}</strong>
		</p>
	</div>
</SVGMap>
</ChartBlock>
 </undefined>`}}}),M()}C.__docgen={data:[],name:"CustomSVGMap.stories.svelte"};const T=A(C,D),tr=["Primary"],rr={...T.Primary,tags:["svelte-csf-v5"]};export{rr as Primary,tr as __namedExportsOrder,D as default};
