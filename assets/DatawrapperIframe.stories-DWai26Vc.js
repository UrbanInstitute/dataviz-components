import{S as T,i as z,s as S,c as u,a as h,m as g,t as _,b as v,d as w,o as y}from"./index-BaWpflLG.js";import{s as $,c as D,i as b,d as m,e as A,t as E,a as C,b as H,g as q,l as L,m as M,n as d}from"./lifecycle-w2Z4hyCF.js";import{g as U,a as j}from"./spread-CgU5AtxT.js";import{D as k}from"./DatawrapperIframe-C-PjhY7V.js";import{p as x,T as O,S as P}from"./collect-stories-DRVXZ_cd.js";function R(n){let t,o,r,i,e;const s=[n[8]];let c={};for(let a=0;a<s.length;a+=1)c=y(c,s[a]);return t=new k({props:c}),t.$on("regionclick",n[1]),t.$on("regionmouseenter",n[2]),t.$on("regionmouseleave",n[3]),t.$on("regionclick",n[4]),t.$on("regionmouseenter",n[5]),t.$on("regionmouseleave",n[6]),t.$on("visrendered",n[7]),{c(){u(t.$$.fragment),o=$(),r=A("p"),i=E(n[0])},l(a){h(t.$$.fragment,a),o=D(a),r=C(a,"P",{});var p=H(r);i=q(p,n[0]),p.forEach(m)},m(a,p){g(t,a,p),b(a,o,p),b(a,r,p),L(r,i),e=!0},p(a,p){const f=p&256?U(s,[j(a[8])]):{};t.$set(f),(!e||p&1)&&M(i,a[0])},i(a){e||(_(t.$$.fragment,a),e=!0)},o(a){v(t.$$.fragment,a),e=!1},d(a){a&&(m(o),m(r)),w(t,a)}}}function W(n){let t,o,r,i;return t=new O({props:{$$slots:{default:[R,({args:e})=>({8:e}),({args:e})=>e?256:0]},$$scope:{ctx:n}}}),r=new P({props:{name:"Default",args:{title:"This is a title for the visualization",ariaLabel:"This is an accessible title for the visualization",datawrapperId:"RMnkX"}}}),{c(){u(t.$$.fragment),o=$(),u(r.$$.fragment)},l(e){h(t.$$.fragment,e),o=D(e),h(r.$$.fragment,e)},m(e,s){g(t,e,s),b(e,o,s),g(r,e,s),i=!0},p(e,[s]){const c={};s&769&&(c.$$scope={dirty:s,ctx:e}),t.$set(c)},i(e){i||(_(t.$$.fragment,e),_(r.$$.fragment,e),i=!0)},o(e){v(t.$$.fragment,e),v(r.$$.fragment,e),i=!1},d(e){e&&m(o),w(t,e),w(r,e)}}}const X={title:"Components/DatawrapperIframe",description:"Datawrapper iframe",component:k,tags:["autodocs"],parameters:{docs:{description:{component:"Datawrapper iframe with <a href='https://developer.datawrapper.de/docs/listening-to-chart-interaction-events' target='_blank'>event dispatching</a> enabled. All interaction events are accessible via <code>on:eventname</code> (<b>no periods</b>) on the `DatawrapperIframe` Svelte component itself. The complete event list and associated descriptions can be found <a href='https://developer.datawrapper.de/docs/listening-to-chart-interaction-events#visualization-events' target='_blank'>here</a>.<br/><br/>Examples of how to setup \"switching\" between Datawrapper charts with a dropdown or button controls can be found <a href='/docs/examples-datawrapper-switching--docs'>in the Examples section here</a>.<br/><br/>In April 2024, the <code>vis.rendered</code> event was added to the Datawrapper event list (per the Urban team's request) in order to track when a visualization had been rendered/painted on the page. This is useful if there is a longer loading visualization (like a large map) and you'd like to indicate to the user that the visualization is still loading.<br><br>The `startrender` event is available via the component's `beforeUpdate()` function in order to track when the iframe starts to load. This can be combined with the `vis.rendered` event to track when the visualization has been rendered/painted on the page in combination with the <a href='/docs/components-loadingwrapper--docs' >LoadingWrapper</a> component."}}}};function B(n,t,o){let r;function i(l){d.call(this,n,l)}function e(l){d.call(this,n,l)}function s(l){d.call(this,n,l)}const c=l=>o(0,r=l.detail.data.fips),a=l=>o(0,r=l.detail.data.fips),p=()=>o(0,r="Hover over a region to change this text");function f(l){d.call(this,n,l)}return o(0,r="Hover over a region to change this text"),[r,i,e,s,c,a,p,f]}class F extends T{constructor(t){super(),z(this,t,B,W,S,{})}}const I=x(F,{meta:{title:"Components/DatawrapperIframe",tags:["autodocs"]},stories:{"tpl:default":{name:"default",template:!0,source:`<DatawrapperIframe
  {...args}
  on:regionclick
  on:regionmouseenter
  on:regionmouseleave
  on:regionclick={(e) => (test = e.detail.data.fips)}
  on:regionmouseenter={(e) => (test = e.detail.data.fips)}
  on:regionmouseleave={() => (test = "Hover over a region to change this text")}
  on:visrendered
/>
<p>{test}</p>`,hasArgs:!0},Default:{name:"Default",template:!1,source:"",hasArgs:!1}},allocatedIds:["default","Story","Template"]},X),V=I.meta,Y=["Default"],Z=I.stories.Default;export{Z as Default,Y as __namedExportsOrder,V as default};
