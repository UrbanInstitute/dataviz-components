import{p as te,a7 as ie,g as a,h as x,y as _,t as u,b as p,d as ae,a8 as se,c as m,s as T,i as s,x as F,a9 as h,e as I}from"./iframe-BjxEKEQH.js";import{e as ne}from"./each-DC_8OmU5.js";import{s as e}from"./attributes-UJeNkN1P.js";import{s as le}from"./class-B9SFUanI.js";import{s as re}from"./style-CNURdi_Z.js";var de=x('<line class="gridline svelte-xedl6y"></line>'),oe=x('<line class="tick-mark svelte-xedl6y" x1="0"></line>'),ce=x("<g><!><!><text> </text></g>"),ye=x('<text class="axis-label svelte-xedl6y" y="0" dy="-8"> </text>'),fe=x('<g class="axis y-axis"><!><!></g>');function ke(M,t){te(t,!0);const[b,R]=se(),n=()=>h(E,"$yScale",b),v=()=>h(Y,"$padding",b),j=()=>h(B,"$xRange",b),H=()=>h(O,"$width",b),{padding:Y,xRange:B,yScale:E,yDomain:ue,xDomain:pe,xScale:xe,width:O}=ie("LayerCake");let q=a(t,"gridlines",3,!0),z=a(t,"tickMarks",3,!1),G=a(t,"formatTick",3,r=>r),f=a(t,"ticks",3,4),J=a(t,"xTick",3,0),V=a(t,"yTick",3,0),K=a(t,"dxTick",19,()=>-4),N=a(t,"dyTick",3,0),P=a(t,"textAnchor",3,"end"),A=a(t,"tickLabelColor",3,"#000000"),S=a(t,"axisLabel",3,""),Q=a(t,"labelDx",3,0),l=F(()=>typeof n().bandwidth=="function"),U=F(()=>Array.isArray(f())?f():s(l)?n().domain():typeof f()=="function"?f()(n().ticks()):n().ticks(f()));var g=fe(),L=m(g);ne(L,16,()=>s(U),r=>r,(r,d)=>{var y=ce(),C=m(y);{var Z=o=>{var i=de();e(i,"x1",0),u((k,w)=>{e(i,"x2",H()),e(i,"y1",k),e(i,"y2",w)},[()=>s(l)?n().bandwidth()/2:0,()=>s(l)?n().bandwidth()/2:0]),p(o,i)};_(C,o=>{q()!==!1&&o(Z)})}var D=T(C);{var $=o=>{var i=oe();u((k,w)=>{e(i,"x2",s(l)?-6:6),e(i,"y1",k),e(i,"y2",w)},[()=>s(l)?n().bandwidth()/2:0,()=>s(l)?n().bandwidth()/2:0]),p(o,i)};_(D,o=>{z()===!0&&o($)})}var c=T(D),ee=m(c);u((o,i,k)=>{le(y,0,`tick tick-${d??""}`,"svelte-xedl6y"),e(y,"transform",`translate(${j()[0]+v().left}, ${o??""})`),e(c,"x",J()),e(c,"y",i),e(c,"dx",s(l)?-9:K()),e(c,"dy",s(l)?4:N()),e(c,"fill",A()),re(c,`text-anchor:${(s(l)?"end":P())??""}; alignment-baseline:middle;`),I(ee,k)},[()=>n()(d),()=>s(l)?n().bandwidth()/2+V():V(),()=>G()(d)]),p(r,y)});var W=T(L);{var X=r=>{var d=ye(),y=m(d);u(()=>{e(d,"x",v().left),e(d,"dx",Q()),e(d,"fill",A()),I(y,S())}),p(r,d)};_(W,r=>{S()&&r(X)})}u(()=>e(g,"transform",`translate(${-v().left}, 0)`)),p(M,g),ae(),R()}ke.__docgen={data:[{name:"gridlines",visibility:"public",description:"Extend lines from the ticks into the chart space",keywords:[],kind:"let",type:{kind:"type",type:"boolean",text:"boolean"},static:!1,readonly:!1,defaultValue:"true"},{name:"tickMarks",visibility:"public",description:"Show a vertical mark for each tick.",keywords:[],kind:"let",type:{kind:"type",type:"boolean",text:"boolean"},static:!1,readonly:!1,defaultValue:"false"},{name:"formatTick",visibility:"public",description:"A function that passes the current tick value and expects a nicely formatted value in return.",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"Function"},static:!1,readonly:!1,defaultValue:"function"},{name:"ticks",visibility:"public",description:"If this is a number, it passes that along to the [d3Scale.ticks](https://github.com/d3/d3-scale) function. If this is an array, hardcodes the ticks to those values. If it's a function, passes along the default tick values and expects an array of tick values in return.",keywords:[],kind:"let",type:{kind:"union",type:[{kind:"type",type:"number",text:"number"},{kind:"type",type:"object",text:"Function"},{kind:"type",type:"array",text:"any[]"}],text:"number | Function | any[]"},static:!1,readonly:!1,defaultValue:"4"},{name:"xTick",visibility:"public",description:"How far over to position the text marker.",keywords:[],kind:"let",type:{kind:"type",type:"number",text:"number"},static:!1,readonly:!1,defaultValue:"0"},{name:"yTick",visibility:"public",description:"How far up and down to position the text marker.",keywords:[],kind:"let",type:{kind:"type",type:"number",text:"number"},static:!1,readonly:!1,defaultValue:"0"},{name:"dxTick",visibility:"public",description:"Any optional value passed to the `dx` attribute on the text marker and tick mark (if visible). This is ignored on the text marker if your scale is ordinal.",keywords:[],kind:"let",type:{kind:"type",type:"number",text:"number"},static:!1,readonly:!1,defaultValue:"..."},{name:"dyTick",visibility:"public",description:"Any optional value passed to the `dy` attribute on the text marker and tick mark (if visible). This is ignored on the text marker if your scale is ordinal.",keywords:[],kind:"let",type:{kind:"type",type:"number",text:"number"},static:!1,readonly:!1,defaultValue:"0"},{name:"textAnchor",visibility:"public",description:'The CSS `text-anchor` passed to the label. This is automatically set to "end" if the scale has a bandwidth method, like in ordinal scales.',keywords:[],kind:"let",type:{kind:"type",type:"string",text:"string"},static:!1,readonly:!1,defaultValue:'"end"'},{name:"tickLabelColor",visibility:"public",description:"The color of the tick labels and axis label",keywords:[],kind:"let",type:{kind:"type",type:"string",text:"string"},static:!1,readonly:!1,defaultValue:'"#000000"'},{name:"axisLabel",visibility:"public",description:"An optional label for the y axis",keywords:[],kind:"let",type:{kind:"type",type:"string",text:"string"},static:!1,readonly:!1,defaultValue:'""'},{name:"labelDx",visibility:"public",description:"Optional dx offset for the axis label",keywords:[],kind:"let",type:{kind:"type",type:"number",text:"number"},static:!1,readonly:!1,defaultValue:"0"}],name:"AxisY.svelte"};export{ke as A};
