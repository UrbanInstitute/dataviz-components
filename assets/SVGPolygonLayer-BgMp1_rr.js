import{p as X,g as n,m as Z,h as L,t as F,Y as $,b as O,d as ee,R as te,i as l,x as ie}from"./iframe-BjxEKEQH.js";import{e as oe,i as ne}from"./each-DC_8OmU5.js";import{s as d}from"./attributes-UJeNkN1P.js";import{s as V}from"./class-B9SFUanI.js";import{s as C}from"./style-CNURdi_Z.js";import{b as ae}from"./this-DGLcOT4Q.js";import{u as c}from"./urbanColors-BkxYcPwH.js";import{u as le,g as re,a as se,b as G,r as h,d as de}from"./lib-CgGEPiW4.js";var ue=(u,e,s)=>e(u,l(s)),pe=(u,e,s)=>e(u,l(s)),ye=L("<path></path>"),fe=L('<g role="presentation"></g>');function ce(u,e){X(e,!0);let s=n(e,"features",3,void 0),W=n(e,"pointerEvents",3,!0),A=n(e,"fill",19,()=>c.blue),k=n(e,"hoverFill",3,void 0),R=n(e,"naFill",19,()=>c.gray_shade_light),v=n(e,"stroke",19,()=>c.white),m=n(e,"hoverStroke",3,void 0),g=n(e,"strokeWidth",3,.5),j=n(e,"hoverStrokeWidth",3,void 0),H=n(e,"ariaRole",3,void 0),y=n(e,"ariaLabel",3,void 0),b=n(e,"highlightFeature",3,void 0),w=n(e,"tooltip",3,!1),B=n(e,"onclick",3,void 0),M=n(e,"onmousemove",3,void 0),N=n(e,"onmouseout",3,void 0);const a=le(),D=ie(()=>de(a.projection));let p;function q(t){return typeof y()=="string"||typeof y()>"u"?y():y()(t)}function f(){const t=p==null?void 0:p.querySelector(".polygon-feature.highlight");t&&h(t)}function J(t,i){var o;h(t.target),f(),a.onPointerMove(t,i.properties,{tooltip:w()}),(o=M())==null||o(new CustomEvent("mousemove",{detail:{e:t,props:i.properties}}))}function U(t,i){var o;h(t.target),f(),a.onPointerDown(t,i.properties,{tooltip:w()}),(o=B())==null||o(new CustomEvent("click",{detail:{e:t,props:i.properties}}))}function x(t){var i;a.onPointerOut(t),(i=N())==null||i(new CustomEvent("mouseout",{detail:{e:t}}))}Z(()=>{a.stickyHighlight,b(),s(),a.features,f()});var r=fe();let _;r.__pointerout=x;let S;oe(r,21,()=>s()||a.features,ne,(t,i)=>{var o=ye();let P;o.__pointermove=[ue,J,i],o.__pointerdown=[pe,U,i];let E;F((Y,z,I,K,Q,T)=>{P=V(o,0,"polygon-feature svelte-1yh1yiv",null,P,Y),d(o,"role",H()),d(o,"label",z),d(o,"fill",I),d(o,"stroke",K),d(o,"stroke-width",g()/a.transform.k),d(o,"d",Q),E=C(o,"",E,{"--hover-stroke":T})},[()=>({highlight:re(l(i),a.stickyHighlight,b())}),()=>q(l(i)),()=>se(l(i),A(),R()),()=>G(l(i),v()),()=>l(D)(l(i)),()=>m()||G(l(i),v())]),O(t,o)}),ae(r,t=>p=t,()=>p),F(t=>{_=V(r,0,"map-layer polygon-layer svelte-1yh1yiv",null,_,t),S=C(r,"",S,{"--hover-fill":k()||null,"--hover-stroke":m()||null,"--hover-stroke-width":`${(j()||g())/a.transform.k}px`,"pointer-events":W()?"auto":"none"})},[()=>({"hover-fill":k()})]),$("blur",r,x),O(u,r),ee()}te(["pointerout","pointermove","pointerdown"]);ce.__docgen={data:[{name:"features",visibility:"public",description:"A list of GeoJSON features. By default this component will render the features set in the parent SVGMap, but if `features` is defined, it plots those instead.",keywords:[],kind:"let",type:{kind:"type",type:"array",text:"GeoPermissibleObjects[]"},static:!1,readonly:!1},{name:"pointerEvents",visibility:"public",description:"Boolean that determines if this layer should respond to pointer events and dispatch events.",keywords:[],kind:"let",type:{kind:"type",type:"boolean",text:"boolean"},static:!1,readonly:!1,defaultValue:"true"},{name:"fill",visibility:"public",description:"A color string or a function that takes a feature and returns a color string. Use in combination with a D3 scale for a dynamic color encoding.",keywords:[],kind:"let",type:{kind:"function",text:"(feature: any) => string"},static:!1,readonly:!1,defaultValue:"..."},{name:"hoverFill",visibility:"public",description:"Optional color to use for a feature's fill when hovered.",keywords:[],kind:"let",type:{kind:"type",type:"string",text:"string"},static:!1,readonly:!1},{name:"naFill",visibility:"public",description:"Color to use for values that are NA or otherwise undefined in the color scale.",keywords:[],kind:"let",type:{kind:"type",type:"string",text:"string"},static:!1,readonly:!1,defaultValue:"..."},{name:"stroke",visibility:"public",description:"A color string or a function that takes a feature and returns a color string.",keywords:[],kind:"let",type:{kind:"function",text:"(feature: any) => string"},static:!1,readonly:!1,defaultValue:"..."},{name:"hoverStroke",visibility:"public",description:"Optional color string for hovered feature stroke.",keywords:[],kind:"let",type:{kind:"type",type:"string",text:"string"},static:!1,readonly:!1},{name:"strokeWidth",visibility:"public",description:"Stroke width of each feature.",keywords:[],kind:"let",type:{kind:"type",type:"number",text:"number"},static:!1,readonly:!1,defaultValue:"0.5"},{name:"hoverStrokeWidth",visibility:"public",description:"Stroke width of each feature when hovered.",keywords:[],kind:"let",type:{kind:"type",type:"number",text:"number"},static:!1,readonly:!1},{name:"ariaRole",visibility:"public",description:"Optional aria role string applied to each feature.",keywords:[],kind:"let",type:{kind:"type",type:"string",text:"string"},static:!1,readonly:!1},{name:"ariaLabel",visibility:"public",description:"Optional aria label string or function applied to each feature.",keywords:[],kind:"let",type:{kind:"union",type:[{kind:"type",type:"string",text:"string"},{kind:"function",text:"(feature: any) => string"}],text:"string | (feature: any) => string"},static:!1,readonly:!1},{name:"highlightFeature",visibility:"public",description:"Optional object matched against feature properties to determine highlight state.",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"Record<string, any>"},static:!1,readonly:!1},{name:"tooltip",visibility:"public",description:"Boolean that determines if this layer should populate the tooltip slot when interacted with.",keywords:[],kind:"let",type:{kind:"type",type:"boolean",text:"boolean"},static:!1,readonly:!1,defaultValue:"false"},{name:"onclick",visibility:"public",description:"Optional click callback.",keywords:[],kind:"let",type:{kind:"function",text:"(event: CustomEvent<{ e: PointerEvent; props: any; }>) => void"},static:!1,readonly:!1},{name:"onmousemove",visibility:"public",description:"Optional mousemove callback.",keywords:[],kind:"let",type:{kind:"function",text:"(event: CustomEvent<{ e: PointerEvent; props: any; }>) => void"},static:!1,readonly:!1},{name:"onmouseout",visibility:"public",description:"Optional mouseout callback.",keywords:[],kind:"let",type:{kind:"function",text:"(event: CustomEvent<{ e: PointerEvent; }>) => void"},static:!1,readonly:!1}],name:"SVGPolygonLayer.svelte"};export{ce as S};
