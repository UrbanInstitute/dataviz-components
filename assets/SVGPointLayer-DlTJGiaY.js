import{al as ge,p as ke,am as be,o as s,ai as me,C as W,D as ve,q,t as A,a2 as h,b as g,d as we,n as xe,l as k,E as _e,F as Fe,ag as E,a as D,G as Se,ah as Ve,g as i,h as b}from"./iframe-BcferWuU.js";import{e as Oe,i as je}from"./each-CZjc6dyk.js";import{s as r}from"./attributes-1snxx-6i.js";import{s as Le}from"./class-B9SFUanI.js";import{s as R}from"./style-CNURdi_Z.js";import{i as Ce}from"./lifecycle-BcSUtK95.js";import{u as w}from"./urbanColors-BkxYcPwH.js";import{g as Ge,r as x,a as Pe,b as We,c as Ae,d as H}from"./lib-Bn4Zx1sO.js";var Ee=q("<circle></circle>"),De=q('<g class="point-layer map-layer svelte-149ch8y"></g>');function Re(B,t){const M=ge(t);ke(t,!1);const[c,I]=xe(),_=()=>k(J,"$projection",c),m=()=>k(U,"$transform",c),N=()=>k(T,"$globalFeatures",c),z=()=>k(X,"$stickyHighlight",c),F=Fe(),{projection:J,features:T,transform:U,handleLayerClick:K,handleLayerMousemove:Q,stickyHighlight:X}=be("map");let Y=s(t,"features",8,void 0),Z=s(t,"fill",24,()=>w.white),S=s(t,"hoverFill",8,void 0),$=s(t,"naFill",24,()=>w.gray_shade_light),ee=s(t,"stroke",24,()=>w.black),te=s(t,"hoverStroke",8,void 0),V=s(t,"strokeWidth",8,0),ie=s(t,"hoverStrokeWidth",8,void 0),v=s(t,"r",8,4),ae=s(t,"opacity",8,1),ne=s(t,"ariaRole",8,void 0),u=s(t,"ariaLabel",8,void 0),se=s(t,"highlightFeature",8,void 0),re=s(t,"pointerEvents",8,!0),O=s(t,"tooltip",8,!1);const f=me();function oe(a){return typeof u()=="string"||typeof u()>"u"?u():u()(a)}function le(a){return typeof v()=="number"?v():v()(a)}function de(a,n){x(a.target),O()&&Q(H(a,n)),f("mousemove",{e:a,props:n.properties})}function ce(a,n){x(a.target),O()&&K(H(a,n)),f("click",{e:a,props:n.properties})}W(()=>_(),()=>{_e(F,Ge(_()))}),W(()=>x,()=>{}),ve(),Ce();var l=De();let j;Oe(l,5,()=>Y()||N(),je,(a,n)=>{var L=E();const y=b(()=>{const[o,e]=i(F).centroid(i(n));return{x:o,y:e}}),C=b(()=>Ae(i(n),ee())),G=b(()=>We(i(n),Z(),$()));var ue=D(L);{var fe=o=>{var e=E(),p=D(e);Ve(p,t,"default",{get feature(){return i(n)},get x(){return i(y).x},get y(){return i(y).y}},null),g(o,e)},ye=o=>{var e=Ee();let p,P;A((d,pe,he)=>{p=Le(e,0,"point-feature svelte-149ch8y",null,p,d),r(e,"role",ne()),r(e,"label",pe),r(e,"cx",i(y).x),r(e,"cy",i(y).y),r(e,"opacity",ae()),r(e,"fill",i(G)),r(e,"r",he),r(e,"stroke-width",V()/m().k),r(e,"stroke",i(C)),P=R(e,"",P,{"--hover-fill":S()||i(G),"--hover-stroke":te()||i(C)})},[()=>({highlight:Pe(i(n),z(),se()),"hover-fill":typeof S()<"u"}),()=>oe(i(n)),()=>le(i(n))/m().k],b),h("mousemove",e,d=>de(d,i(n))),h("click",e,d=>ce(d,i(n))),g(o,e)};Se(ue,o=>{M.default?o(fe):o(ye,!1)})}g(a,L)}),A(()=>j=R(l,"",j,{"pointe-events":re()?"auto":"none","--hover-stroke-width":`${(ie()||V())/m().k}px`})),h("mouseout",l,a=>f("mouseout")),h("blur",l,a=>f("mouseout")),g(B,l),we(),I()}Re.__docgen={data:[{name:"features",visibility:"public",description:"A list of GeoJSON features. By default this component will render the features set in the parent SVGMap, but if `features` is defined, it plots those instead. Points are rendered as SVG `circle` elements by default. Polygon features are converted to points with `d3.geoPath().centroid`.\n[features]",keywords:[],kind:"let",type:{kind:"type",type:"array",text:"any[]"},static:!1,readonly:!1},{name:"fill",visibility:"public",description:`A color string or a function that takes a feature and returns a color string. Use in combination with a D3 scale for a dynamic color encoding.
[fill = urbanColors.blue] A string or function that returns a string to use as this layers fill color.`,keywords:[],kind:"let",type:{kind:"function",text:"(Object: any) => string"},static:!1,readonly:!1,defaultValue:"..."},{name:"hoverFill",visibility:"public",description:"Optional color to use for a feature's fill when hovered",keywords:[],kind:"let",type:{kind:"type",type:"string",text:"string"},static:!1,readonly:!1},{name:"naFill",visibility:"public",description:"Color to use for values that are NA or otherwise undefined in the color scale",keywords:[],kind:"let",type:{kind:"type",type:"string",text:"string"},static:!1,readonly:!1,defaultValue:"..."},{name:"stroke",visibility:"public",description:`A color string or a function that takes a feature and returns a color string
[fill = urbanColors.blue] A string or function that returns a string to use as this layers stroke color.`,keywords:[],kind:"let",type:{kind:"function",text:"(Object: any) => string"},static:!1,readonly:!1,defaultValue:"..."},{name:"hoverStroke",visibility:"public",description:"Optional color string for hovered feature stroke",keywords:[],kind:"let",type:{kind:"type",type:"string",text:"string"},static:!1,readonly:!1},{name:"strokeWidth",visibility:"public",description:`Stroke width of each feature
[strokeWidth = 0.5]`,keywords:[],kind:"let",type:{kind:"type",type:"number",text:"number"},static:!1,readonly:!1,defaultValue:"0"},{name:"hoverStrokeWidth",visibility:"public",description:`Stroke width of each feature when hovered
[strokeWidth = undefined]`,keywords:[],kind:"let",type:{kind:"type",type:"number",text:"number"},static:!1,readonly:!1},{name:"r",visibility:"public",description:"Function or static value to use for radius of circle",keywords:[],kind:"let",type:{kind:"union",type:[{kind:"type",type:"number",text:"number"},{kind:"function",text:"(Object: any) => number"}],text:"number | (Object: any) => number"},static:!1,readonly:!1,defaultValue:"4"},{name:"opacity",visibility:"public",description:"Opacity of point circles",keywords:[],kind:"let",type:{kind:"type",type:"number",text:"number"},static:!1,readonly:!1,defaultValue:"1"},{name:"ariaRole",visibility:"public",description:`Optional aria role string to be applied to each feature. Defaults to no role, assuming that SVG is hidden from the accessiblity tree.
[ariaRole = undefined]`,keywords:[],kind:"let",type:{kind:"type",type:"string",text:"string"},static:!1,readonly:!1},{name:"ariaLabel",visibility:"public",description:"Optional aria label string or function to be applied to each feature. Defaults to no label, assuming that SVG is hidden from the accessiblity tree. If a function is passed, it should take a `feature` as an argument and return a label string.\n[ariaLabel = undefined]",keywords:[],kind:"let",type:{kind:"union",type:[{kind:"type",type:"string",text:"string"},{kind:"function",text:"(Object: any) => string"}],text:"string | (Object: any) => string"},static:!1,readonly:!1},{name:"highlightFeature",visibility:"public",description:"Optional object that will be compared with each `feature` displayed in the layer. If all of the key/value pairs in `highlightFeature` are equal to the properties of a given `feature`, set that `feature` to a highlighted state.",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"{ string: any; }"},static:!1,readonly:!1},{name:"pointerEvents",visibility:"public",description:`Boolean that determines if this layer should respond to pointer events and dispatch events.
[pointerEvents = true]`,keywords:[],kind:"let",type:{kind:"type",type:"boolean",text:"boolean"},static:!1,readonly:!1,defaultValue:"true"},{name:"tooltip",visibility:"public",description:`Boolean that determines if this layer should populate the tooltip slot when interacted with.
[tooltip = false]`,keywords:[],kind:"let",type:{kind:"type",type:"boolean",text:"boolean"},static:!1,readonly:!1,defaultValue:"false"}],name:"SVGPointLayer.svelte"};export{Re as S};
