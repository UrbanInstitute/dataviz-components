import{p as f,V as v,d as u,f as g,a as w,W as b,y as r,s as _,t as D,b as I,z as k,e as x,g as z,c as T}from"./iframe-DkBoYltS.js";import{i as y}from"./lifecycle-BcE5ET0k.js";import{b as n}from"./misc-DTsII0sD.js";import{D as s}from"./DatawrapperIframe-j9h6--Rf.js";import{c as C,d as E}from"./create-runtime-stories-CMVs6-vI.js";import"./attributes-DhG7CSOU.js";import"./attributes-q36Eg1F8.js";import"./class-B9SFUanI.js";import"./style-CNURdi_Z.js";const H='Datawrapper iframe with [event dispatching](https://developer.datawrapper.de/docs/listening-to-chart-interaction-events) enabled. All interaction events are accessible via `on:eventname` (**no periods**) on the `DatawrapperIframe` Svelte component itself. The complete event list and associated descriptions can be found [here](https://developer.datawrapper.de/docs/listening-to-chart-interaction-events#visualization-events).\n\nExamples of how to setup "switching" between Datawrapper charts with a dropdown or button controls can be found [in the Examples section here](/docs/examples-datawrapper-switching--docs).\n\nIn April 2024, the `vis.rendered` event was added to the Datawrapper event list (per the Urban team\'s request) in order to track when a visualization had been rendered/painted on the page. This is useful if there is a longer loading visualization (like a large map) and you\'d like to indicate to the user that the visualization is still loading.\n\nThe `startrender` event is available via the component\'s `beforeUpdate()` function in order to track when the iframe starts to load. This can be combined with the `vis.rendered` event to track when the visualization has been rendered/painted on the page in combination with the [LoadingWrapper](/docs/components-loadingwrapper--docs) component.\n\n```js\nimport { DatawrapperIframe } from "@urbaninstitute/dataviz-components";\n```\n',L={title:"Components/DatawrapperIframe",component:s,tags:["autodocs"],parameters:{docs:{description:{component:H}},githubLink:{url:"/DatawrapperIframe/DatawrapperIframe.svelte"}}},{Story:S}=E();var A=g("<!> <p> </p>",1);function p(l,t){f(t,!1);let a=k("Hover over a region to change this text");y(),S(l,{name:"Default",args:{title:"This is a title for the visualization",ariaLabel:"This is an accessible title for the visualization",datawrapperId:"RMnkX"},template:(d,c=v)=>{var i=A(),o=w(i);s(o,b(c,{$$events:{regionclick:[function(e){n.call(this,t,e)},e=>r(a,e.detail.data.fips)],regionmouseenter:[function(e){n.call(this,t,e)},e=>r(a,e.detail.data.fips)],regionmouseleave:[function(e){n.call(this,t,e)},()=>r(a,"Hover over a region to change this text")],visrendered(e){n.call(this,t,e)}}}));var m=_(o,2),h=T(m);D(()=>x(h,z(a))),I(d,i)},$$slots:{template:!0},parameters:{__svelteCsf:{rawCode:`<DatawrapperIframe
  {...args}
  on:regionclick
  on:regionmouseenter
  on:regionmouseleave
  on:regionclick={(e) => (test = e.detail.data.fips)}
  on:regionmouseenter={(e) => (test = e.detail.data.fips)}
  on:regionmouseleave={() => (test = "Hover over a region to change this text")}
  on:visrendered
/>
<p>{test}</p>`}}}),u()}p.__docgen={data:[],name:"DatawrapperIframe.stories.svelte"};const M=C(p,L),G=["Default"],J={...M.Default,tags:["svelte-csf-v5"]};export{J as Default,G as __namedExportsOrder,L as default};
