import{p as ye,am as he,o as l,ai as pe,aC as ce,C as W,D as ge,q as M,t as O,a2 as p,b as P,d as ke,n as be,E as k,g as e,F as b,h as q,l as c}from"./iframe-BcferWuU.js";import{e as me,i as ve}from"./each-CZjc6dyk.js";import{s as r}from"./attributes-1snxx-6i.js";import{s as G}from"./class-B9SFUanI.js";import{s as H}from"./style-CNURdi_Z.js";import{b as we}from"./this-XyIzL1DC.js";import{i as _e}from"./lifecycle-BcSUtK95.js";import{u as m}from"./urbanColors-BkxYcPwH.js";import{g as Fe,r as d,a as xe,b as Se,c as B,d as D}from"./lib-Bn4Zx1sO.js";var Ce=M("<path></path>"),Ve=M("<g></g>");function Le(N,i){ye(i,!1);const[f,R]=be(),v=()=>c(J,"$projection",f),w=()=>c(z,"$transform",f),U=()=>c(T,"$globalFeatures",f),I=()=>c(X,"$stickyHighlight",f),_=b(),{projection:J,features:T,transform:z,handleLayerClick:K,handleLayerMousemove:Q,stickyHighlight:X}=he("map");let Y=l(i,"fill",24,()=>m.blue),F=l(i,"hoverFill",8,void 0),Z=l(i,"naFill",24,()=>m.gray_shade_light),x=l(i,"stroke",24,()=>m.white),S=l(i,"hoverStroke",8,void 0),C=l(i,"strokeWidth",8,.5),$=l(i,"hoverStrokeWidth",8,void 0),ee=l(i,"features",8,void 0),te=l(i,"pointerEvents",8,!0),ie=l(i,"ariaRole",8,void 0),y=l(i,"ariaLabel",8,void 0),ae=l(i,"highlightFeature",8,void 0),V=l(i,"tooltip",8,!1);const h=pe();let g=b(),s=b();function le(t){return typeof y()=="string"||typeof y()>"u"?y():y()(t)}function oe(t,a){d(t.target),e(s)&&d(e(s)),V()&&Q(D(t,a)),h("mousemove",{e:t,props:a.properties})}function se(t,a){d(t.target),e(s)&&d(e(s)),V()&&K(D(t,a)),h("click",{e:t,props:a.properties})}ce(()=>{k(s,e(g).querySelector("path.highlight"))}),W(()=>v(),()=>{k(_,Fe(v()))}),W(()=>(e(s),d),()=>{e(s)&&d(e(s))}),ge(),_e();var n=Ve();let L,j;me(n,5,()=>ee()||U(),ve,(t,a)=>{var o=Ce();let A,E;O((u,ne,re,de,ue,fe)=>{A=G(o,0,"polygon-feature svelte-1yh1yiv",null,A,u),r(o,"role",ie()),r(o,"label",ne),r(o,"fill",re),r(o,"stroke",de),r(o,"stroke-width",C()/w().k),r(o,"d",ue),E=H(o,"",E,{"--hover-stroke":fe})},[()=>({highlight:xe(e(a),I(),ae())}),()=>le(e(a)),()=>Se(e(a),Y(),Z()),()=>B(e(a),x()),()=>e(_)(e(a)),()=>S()||B(e(a),x())],q),p("mousemove",o,u=>oe(u,e(a))),p("mousedown",o,u=>se(u,e(a))),P(t,o)}),we(n,t=>k(g,t),()=>e(g)),O(t=>{L=G(n,0,"map-layer polygon-layer svelte-1yh1yiv",null,L,t),j=H(n,"",j,{"--hover-fill":F()||null,"--hover-stroke":S()||null,"--hover-stroke-width":`${($()||C())/w().k}px`,"pointe-events":te()?"auto":"none"})},[()=>({"hover-fill":F()})],q),p("mouseout",n,t=>h("mouseout")),p("blur",n,t=>h("mouseout")),P(N,n),ke(),R()}Le.__docgen={data:[{name:"fill",visibility:"public",description:`A color string or a function that takes a feature and returns a color string. Use in combination with a D3 scale for a dynamic color encoding.
[fill = urbanColors.blue] A string or function that returns a string to use as this layers fill color.`,keywords:[],kind:"let",type:{kind:"function",text:"(Object: any) => string"},static:!1,readonly:!1,defaultValue:"..."},{name:"hoverFill",visibility:"public",description:"Optional color to use for a feature's fill when hovered",keywords:[],kind:"let",type:{kind:"type",type:"string",text:"string"},static:!1,readonly:!1},{name:"naFill",visibility:"public",description:"Color to use for values that are NA or otherwise undefined in the color scale",keywords:[],kind:"let",type:{kind:"type",type:"string",text:"string"},static:!1,readonly:!1,defaultValue:"..."},{name:"stroke",visibility:"public",description:`A color string or a function that takes a feature and returns a color string
[fill = urbanColors.blue] A string or function that returns a string to use as this layers stroke color.`,keywords:[],kind:"let",type:{kind:"function",text:"(Object: any) => string"},static:!1,readonly:!1,defaultValue:"..."},{name:"hoverStroke",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"other",text:"undefined"},static:!1,readonly:!1},{name:"strokeWidth",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"number",text:"number"},static:!1,readonly:!1,defaultValue:"0.5"},{name:"hoverStrokeWidth",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"other",text:"undefined"},static:!1,readonly:!1},{name:"features",visibility:"public",description:"A list of GeoJSON features. By default this component will render the features set in the parent SVGMap, but if `features` is defined, it plots those instead.\n[features]",keywords:[],kind:"let",type:{kind:"type",type:"array",text:"any[]"},static:!1,readonly:!1},{name:"pointerEvents",visibility:"public",description:`Boolean that determines if this layer should respond to pointer events and dispatch events.
[pointerEvents]`,keywords:[],kind:"let",type:{kind:"type",type:"boolean",text:"boolean"},static:!1,readonly:!1,defaultValue:"true"},{name:"ariaRole",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"other",text:"undefined"},static:!1,readonly:!1},{name:"ariaLabel",visibility:"public",keywords:[],kind:"let",type:{kind:"type",type:"other",text:"undefined"},static:!1,readonly:!1},{name:"highlightFeature",visibility:"public",description:"Optional object that will be compared with each `feature` displayed in the layer. If all of the key/value pairs in `highlightFeature` are equal to the properties of a given `feature`, set that `feature` to a highlighted state.",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"{ string: any; }"},static:!1,readonly:!1},{name:"tooltip",visibility:"public",description:`Boolean that determines if this layer should populate the tooltip slot when interacted with.
[tooltip = false]`,keywords:[],kind:"let",type:{kind:"type",type:"boolean",text:"boolean"},static:!1,readonly:!1,defaultValue:"false"}],name:"SVGPolygonLayer.svelte"};export{Le as S};
