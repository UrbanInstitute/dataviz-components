import{p as tt,f as u,a as x,_ as et,g as t,h as w,s as a,G as b,a2 as _,b as l,E as $,Z as k,F as M,c as P,d as ot,a0 as it,t as j,e as rt}from"./iframe-BcferWuU.js";import{s as st}from"./class-B9SFUanI.js";import{s as nt}from"./style-CNURdi_Z.js";import{b as at}from"./this-XyIzL1DC.js";import{i as lt}from"./lifecycle-BcSUtK95.js";import{T}from"./Tooltip-CvVxsiFy.js";import{c as pt,d as dt}from"./create-runtime-stories-CHM6HO4D.js";import"./BasicDropdown-DJMtB7rs.js";import"./Block-UHg9Sqz9.js";import"./DatawrapperIframe-BBFhdL5B.js";import"./HeadingAlt-CQdogqxm.js";import"./IconPlus-DHJ6oWZ1.js";import"./IconMinus-qSL_4EAI.js";import"./IconClose-CVA51IW5.js";import"./IconSearch-D1KDxOeC.js";import"./LogoTPCBadge-DKzhnvIQ.js";import"./LogoUrbanBadge-Cb9tDsVo.js";import"./LogoUrbanAnimated-D8omdrsf.js";import"./LogoUrban-U4qo6VZS.js";import"./LogoUrbanWide-CRaXJYQ5.js";import"./Navbar-CS-fQRTa.js";import"./ProjectCredits-l_sM_Qec.js";import"./ReturnTop-BE8IcWbw.js";import"./Scorecard-CR05xbEU.js";import"./SocialShare-U1Ocdmw1.js";import"./TextBlock-BxLnvGMM.js";import{B as q}from"./Button-CeUI2gWw.js";import"./ChartBlock-KwUWCXmq.js";import"./Meta-DghlXPRk.js";import"./Toggle-DP_Mulpl.js";import"./Scrolly-DjWM9j51.js";import"./Analytics-BG00URCE.js";import"./Headline-7NrMcj5C.js";import"./PymChild-CDrv53av.js";import"./LoadingWrapper-CpRnKu88.js";import"./AxisY-L_iQ3sGL.js";import"./AxisX-Cg_Oy-fJ.js";import{u as A}from"./urbanColors-BkxYcPwH.js";const G={title:"Components/Tooltip",component:T,argTypes:{style:{control:"select",options:["light","dark"]},size:{control:"select",options:["small","large"]},orientation:{control:"select",options:["dynamic","left","right","top","bottom","bottom-left","bottom-right","top-left","top-right"]}},parameters:{docs:{description:{component:"A basic tooltip."}},githubLink:{url:"/Tooltip/Tooltip.svelte"}}},{Story:f}=dt();var mt=u('<div class="wrapper" style="background: var(--color-gray-shade-lighter); width: 100%; height: 300px; display: grid; place-content: center;"><p>Hover me to see tooltip</p></div> <!>',1),ct=u("<h2>HTML Formatting</h2> <p>For <em>fancier</em> tooltip structure</p>",1),vt=u('<div class="wrapper" style="background: var(--color-gray-shade-lighter); width: 100%; height: 300px; display: grid; place-content: center;"><p>Hover me to see tooltip</p></div> <!>',1),ut=u('<div class="wrapper" style="display: grid; place-content: center; background: var(--color-gray-shade-lighter); position: relative; width: 800px; height: 300px; border: solid 1px black; margin: 100px;"><p>Hover me to see tooltip</p> <!></div>'),gt=u('<div class="wrapper" style="position: relative; width: 800px; height: 300px; display: grid; place-content: center;"><div style="display: inline-block"><!></div></div> <!>',1),ht=u('<div><h5 style="margin: 0;">This is a completely custom tooltip</h5> <p style="font-size: var(--font-size-small);">Markup and style is up to me, but positioning is still provided by the component.</p> <!></div>'),_t=u('<div class="wrapper" style="background: var(--color-gray-shade-lighter); width: 100%; height: 300px; display: grid; place-content: center;"><p>Hover me to see tooltip</p></div> <!>',1),ft=u("<!> <!> <!> <!> <!> <!> <!>",1);function R(Z,J){tt(J,!1);const H=(s,v=et)=>{var e=mt(),o=x(e),m=a(o,2);{var p=n=>{T(n,it(v,{get x(){return t(i)},get y(){return t(r)},children:(g,d)=>{var c=k();j(()=>rt(c,v().content||"This is a tooltip")),l(g,c)},$$slots:{default:!0}}))};b(m,n=>{t(i)&&t(r)&&n(p)})}_("mousemove",o,C),_("mouseout",o,Y),l(s,e)};let i=M(),r=M(),O=M(),X=M(!1);function C(s){const v=s.pageX,e=s.pageY;$(i,v),$(r,e)}function Y(s){$(i,null),$(r,null)}lt();var z=ft(),S=x(z);const K=w(()=>({x:t(i),y:t(r)}));f(S,{name:"Mouse event",get args(){return t(K)},get template(){return H},parameters:{__svelteCsf:{rawCode:`<div class="wrapper" style="background: var(--color-gray-shade-lighter); width: 100%; height: 300px; display: grid; place-content: center;" on:mousemove={handleMousemove} on:mouseout={handleMouseout}>
	<p>Hover me to see tooltip</p>
</div>
{#if tooltipX && tooltipY}
	<Tooltip {...args} x={tooltipX} y={tooltipY}>{args.content || "This is a tooltip"}</Tooltip>
{/if}`}}});var L=a(S,2);const N=w(()=>({content:"This is a dark style tooltip",style:"dark",x:t(i),y:t(r)}));f(L,{name:"Dark mode",get args(){return t(N)},get template(){return H},parameters:{__svelteCsf:{rawCode:`<div class="wrapper" style="background: var(--color-gray-shade-lighter); width: 100%; height: 300px; display: grid; place-content: center;" on:mousemove={handleMousemove} on:mouseout={handleMouseout}>
	<p>Hover me to see tooltip</p>
</div>
{#if tooltipX && tooltipY}
	<Tooltip {...args} x={tooltipX} y={tooltipY}>{args.content || "This is a tooltip"}</Tooltip>
{/if}`}}});var B=a(L,2);f(B,{name:"Custom HTML",asChild:!0,children:(s,v)=>{var e=vt(),o=x(e),m=a(o,2);{var p=n=>{T(n,{get x(){return t(i)},get y(){return t(r)},size:"large",children:(g,d)=>{var c=ct();l(g,c)},$$slots:{default:!0}})};b(m,n=>{t(i)&&t(r)&&n(p)})}_("mousemove",o,C),l(s,e)},$$slots:{default:!0},parameters:{__svelteCsf:{rawCode:`<div class="wrapper" style="background: var(--color-gray-shade-lighter); width: 100%; height: 300px; display: grid; place-content: center;" on:mousemove={handleMousemove}>
	<p>Hover me to see tooltip</p>
</div>
{#if tooltipX && tooltipY}
	<Tooltip x={tooltipX} y={tooltipY} size="large">
		<h2>HTML Formatting</h2> <p>For <em>fancier</em> tooltip structure</p>
	</Tooltip>
{/if}`}}});var D=a(B,2);const Q=w(()=>({content:"This tooltip is oriented to the left",style:"dark",orientation:"left",x:t(i),y:t(r)}));f(D,{name:"Static orientation",get args(){return t(Q)},get template(){return H},parameters:{__svelteCsf:{rawCode:`<div class="wrapper" style="background: var(--color-gray-shade-lighter); width: 100%; height: 300px; display: grid; place-content: center;" on:mousemove={handleMousemove} on:mouseout={handleMouseout}>
	<p>Hover me to see tooltip</p>
</div>
{#if tooltipX && tooltipY}
	<Tooltip {...args} x={tooltipX} y={tooltipY}>{args.content || "This is a tooltip"}</Tooltip>
{/if}`}}});var F=a(D,2);f(F,{name:"Contain inside parent",asChild:!0,children:(s,v)=>{var e=ut(),o=a(P(e),2);{var m=p=>{T(p,{content:"This tooltip is contained by parent",containParent:!0,get x(){return t(i)},get y(){return t(r)}})};b(o,p=>{t(i)&&t(r)&&p(m)})}_("mousemove",e,C),_("mouseout",e,Y),l(s,e)},$$slots:{default:!0},parameters:{__svelteCsf:{rawCode:`<div class="wrapper" style="display: grid; place-content: center; background: var(--color-gray-shade-lighter); position: relative; width: 800px; height: 300px; border: solid 1px black; margin: 100px;" on:mousemove={handleMousemove} on:mouseout={handleMouseout}>
	<p>Hover me to see tooltip</p> 		{#if tooltipX && tooltipY}
		<Tooltip content="This tooltip is contained by parent" containParent x={tooltipX} y={tooltipY} />
	{/if}
</div>`}}});var I=a(F,2);f(I,{name:"Pinned to element",asChild:!0,children:(s,v)=>{var e=gt(),o=x(e),m=P(o),p=P(m);q(p,{onClick:()=>$(X,!t(X)),children:(d,c)=>{var h=k("Click me");l(d,h)},$$slots:{default:!0}}),at(m,d=>$(O,d),()=>t(O));var n=a(o,2);{var g=d=>{T(d,{elOffset:5,get el(){return t(O)},children:(c,h)=>{var E=k("This tooltip is pinned to an existing element");l(c,E)},$$slots:{default:!0}})};b(n,d=>{t(X)&&d(g)})}l(s,e)},$$slots:{default:!0},parameters:{__svelteCsf:{rawCode:`<div class="wrapper" style="position: relative; width: 800px; height: 300px; display: grid; place-content: center;">
	<div bind:this={pinEl} style="display: inline-block">
		<Button onClick={() => showPinned = !showPinned}>Click me</Button>
	</div>
</div>
{#if showPinned}
	<Tooltip elOffset={5} el={pinEl}>This tooltip is pinned to an existing element</Tooltip>
{/if}`}}});var U=a(I,2);f(U,{name:"Tooltip override",asChild:!0,children:(s,v)=>{var e=_t(),o=x(e),m=a(o,2);{var p=n=>{T(n,{get x(){return t(i)},get y(){return t(r)},size:"large",$$slots:{tooltipOverride:(g,d)=>{const c=w(()=>d.orientation);var h=ht(),E=a(P(h),4);q(E,{children:(V,Mt)=>{var W=k("Custom");l(V,W)},$$slots:{default:!0}}),j(()=>{st(h,1,`custom-tooltip ${t(c)??""}`),nt(h,`background: ${A.gray_shade_lighter}; padding: var(--spacing-2); border: solid 2px ${A.magenta}`)}),l(g,h)}}})};b(m,n=>{t(i)&&t(r)&&n(p)})}_("mousemove",o,C),_("mouseout",o,Y),l(s,e)},$$slots:{default:!0},parameters:{__svelteCsf:{rawCode:`<div class="wrapper" style="background: var(--color-gray-shade-lighter); width: 100%; height: 300px; display: grid; place-content: center;" on:mousemove={handleMousemove} on:mouseout={handleMouseout}>
	<p>Hover me to see tooltip</p>
</div>
{#if tooltipX && tooltipY}
	<Tooltip x={tooltipX} y={tooltipY} size="large">
		<svelte:fragment let:orientation slot="tooltipOverride">
			<div class="custom-tooltip {orientation}" style="background: {urbanColors.gray_shade_lighter}; padding: var(--spacing-2); border: solid 2px {urbanColors.magenta}">
				<h5 style="margin: 0;">This is a completely custom tooltip</h5> <p style="font-size: var(--font-size-small);">Markup and style is up to me, but positioning is still provided by the component.</p> <Button>Custom</Button>
			</div>
		</svelte:fragment>
	</Tooltip>
{/if}`}}}),l(Z,z),ot()}R.__docgen={data:[],name:"Tooltip.stories.svelte"};const y=pt(R,G),yt=["MouseEvent","DarkMode","CustomHTML","StaticOrientation","ContainInsideParent","PinnedToElement","TooltipOverride"],$t={...y.MouseEvent,tags:["svelte-csf-v5"]},Tt={...y.DarkMode,tags:["svelte-csf-v5"]},xt={...y.CustomHTML,tags:["svelte-csf-v5"]},bt={...y.StaticOrientation,tags:["svelte-csf-v5"]},Ct={...y.ContainInsideParent,tags:["svelte-csf-v5"]},wt={...y.PinnedToElement,tags:["svelte-csf-v5"]},kt={...y.TooltipOverride,tags:["svelte-csf-v5"]},ce=Object.freeze(Object.defineProperty({__proto__:null,ContainInsideParent:Ct,CustomHTML:xt,DarkMode:Tt,MouseEvent:$t,PinnedToElement:wt,StaticOrientation:bt,TooltipOverride:kt,__namedExportsOrder:yt,default:G},Symbol.toStringTag,{value:"Module"}));export{$t as $,Tt as a,xt as b,bt as c,Ct as d,wt as e,kt as f,ce as s};
