import{S as w,i as V,s as b,c as m,a as p,m as u,t as c,b as f,d,o as k}from"./index-lamZ5WrB.js";import{s as P,c as H,i as L,d as M,o as g}from"./lifecycle-BNS46k4e.js";import{g as C,a as A}from"./spread-CgU5AtxT.js";import{S as h}from"./SVGPointLayer-C8KHuizz.js";import{S as B}from"./lib-BZkmstMI.js";import{f as _,u as y,e as v}from"./index-D9vgTP3q.js";import{p as T,T as E,S as I}from"./collect-stories-D1soPxiK.js";import{s as j}from"./states_geo-Cwuy5VwI.js";import{u as S}from"./urbanColors-BkxYcPwH.js";import"./each-CxU73AbR.js";import"./string-3NetaFjT.js";import"./Tooltip-BmgvXhKp.js";import"./globals-D0QH3NT1.js";const q='A layer that works inside an `SVGMap` component that displays data as a point/symbol layer. If polygon features are passed to this layer, the centroid will be computed with `d3.geoPath.centroid`.\n\n## Basic usage\n\nImport `SVGPointLayer` and `SVGMap` from this library:\n\n```js\nimport { SVGMap, SVGPointLayer } from "@urbaninstitute/dataviz-components/maps";\n\n```\nAdd your own GeoJSON data and specify configuration and props seen below.\n\n';function O(o){let t,s;const a=[o[7]];let n={};for(let e=0;e<a.length;e+=1)n=k(n,a[e]);return t=new h({props:n}),t.$on("click",o[3]),t.$on("mouseout",o[4]),t.$on("mousemove",o[5]),t.$on("click",o[2]),t.$on("mouseout",o[1]),t.$on("mousemove",o[0]),{c(){m(t.$$.fragment)},l(e){p(t.$$.fragment,e)},m(e,r){u(t,e,r),s=!0},p(e,r){const i=r&128?C(a,[A(e[7])]):{};t.$set(i)},i(e){s||(c(t.$$.fragment,e),s=!0)},o(e){f(t.$$.fragment,e),s=!1},d(e){d(t,e)}}}function z(o){let t,s;return t=new B({props:{features:o[7].features,$$slots:{default:[O]},$$scope:{ctx:o}}}),{c(){m(t.$$.fragment)},l(a){p(t.$$.fragment,a)},m(a,n){u(t,a,n),s=!0},p(a,n){const e={};n&128&&(e.features=a[7].features),n&384&&(e.$$scope={dirty:n,ctx:a}),t.$set(e)},i(a){s||(c(t.$$.fragment,a),s=!0)},o(a){f(t.$$.fragment,a),s=!1},d(a){d(t,a)}}}function D(o){let t,s,a,n;return t=new E({props:{$$slots:{default:[z,({args:e})=>({7:e}),({args:e})=>e?128:0]},$$scope:{ctx:o}}}),a=new I({props:{name:"simple",args:{features:j.features,stroke:S.blue_shade_darker,fill:S.blue,hoverFill:S.magenta},play:o[6]}}),{c(){m(t.$$.fragment),s=P(),m(a.$$.fragment)},l(e){p(t.$$.fragment,e),s=H(e),p(a.$$.fragment,e)},m(e,r){u(t,e,r),L(e,s,r),u(a,e,r),n=!0},p(e,[r]){const i={};r&384&&(i.$$scope={dirty:r,ctx:e}),t.$set(i)},i(e){n||(c(t.$$.fragment,e),c(a.$$.fragment,e),n=!0)},o(e){f(t.$$.fragment,e),f(a.$$.fragment,e),n=!1},d(e){e&&M(s),d(t,e),d(a,e)}}}const F={title:"Maps/SVGPointLayer",component:h,tags:["autodocs"],argTypes:{features:{control:"array"},fill:{control:"text"},stroke:{control:"text"}},parameters:{docs:{description:{component:q}}}};function J(o){let t=_(),s=_(),a=_();function n(l){g.call(this,o,l)}function e(l){g.call(this,o,l)}function r(l){g.call(this,o,l)}return[t,s,a,n,e,r,async({canvasElement:l,args:K})=>{const $=l.querySelector(".point-feature");await y.hover($),await v(t).toHaveBeenCalled(),await y.unhover($),await v(s).toHaveBeenCalled(),await y.click($),await v(a).toHaveBeenCalled()}]}class N extends w{constructor(t){super(),V(this,t,J,D,b,{})}}const G=T(N,{meta:{title:"Maps/SVGPointLayer",tags:["autodocs"]},stories:{"tpl:default":{name:"default",template:!0,source:`<SVGMap features={args.features}>
  <SVGPointLayer
    {...args}
    on:click
    on:mouseout
    on:mousemove
    on:click={clickHandler}
    on:mouseout={mouseoutHandler}
    on:mousemove={mousemoveHandler}
  ></SVGPointLayer>
</SVGMap>`,hasArgs:!0},simple:{name:"simple",template:!1,source:"",hasArgs:!1}},allocatedIds:["default","userEvent","expect","fn","Story","Template","states","urbanColors"]},F),ne=G.meta,re=["simple"],le=G.stories.simple;export{re as __namedExportsOrder,ne as default,le as simple};
