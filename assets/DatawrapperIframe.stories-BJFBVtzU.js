import{p as h,n as f,d as v,f as u,a as g,V as w,Z as a,s as _,t as b,b as D,X as I,e as k,i as x,c as z}from"./iframe-BjxEKEQH.js";import{c as T,d as $}from"./create-runtime-stories-HPq0r60h.js";import{i as y}from"./lifecycle-hO6jUP98.js";import{D as o}from"./DatawrapperIframe-DBrTT8wg.js";import"./attributes-UJeNkN1P.js";import"./attributes-q36Eg1F8.js";import"./class-B9SFUanI.js";import"./style-CNURdi_Z.js";const A='Datawrapper iframe with [event dispatching](https://developer.datawrapper.de/docs/listening-to-chart-interaction-events) enabled. All interaction events are accessible via lowercase props such as `onregionclick` (**no periods**) on the `DatawrapperIframe` Svelte component itself. The complete event list and associated descriptions can be found [here](https://developer.datawrapper.de/docs/listening-to-chart-interaction-events#visualization-events).\n\nExamples of how to setup "switching" between Datawrapper charts with a dropdown or button controls can be found [in the Examples section here](/docs/examples-datawrapper-switching--docs).\n\nIn April 2024, the `vis.rendered` event was added to the Datawrapper event list (per the Urban team\'s request) in order to track when a visualization had been rendered/painted on the page. This is useful if there is a longer loading visualization (like a large map) and you\'d like to indicate to the user that the visualization is still loading.\n\nThe `startrender` callback fires whenever the iframe begins rendering. Combine it with the `onvisrendered` handler to track when the visualization finishes loading, optionally in combination with the [LoadingWrapper](/docs/components-loadingwrapper--docs) component.\n\n```js\nimport { DatawrapperIframe } from "@urbaninstitute/dataviz-components";\n```\n',C={title:"Components/DatawrapperIframe",component:o,tags:["autodocs"],parameters:{docs:{description:{component:A}},githubLink:{url:"/DatawrapperIframe/DatawrapperIframe.svelte"}}},{Story:E}=$();var H=u("<!> <p> </p>",1);function i(s,p){h(p,!1);let e=I("Hover over a region to change this text");y(),E(s,{name:"Default",args:{title:"This is a title for the visualization",ariaLabel:"This is an accessible title for the visualization",datawrapperId:"RMnkX"},template:(d,l=f)=>{var r=H(),n=g(r);o(n,w(l,{onregionclick:t=>a(e,t.detail.data.fips),onregionmouseenter:t=>a(e,t.detail.data.fips),onregionmouseleave:()=>a(e,"Hover over a region to change this text"),onvisrendered:()=>{}}));var c=_(n,2),m=z(c);b(()=>k(m,x(e))),D(d,r)},$$slots:{template:!0},parameters:{docs:{description:{story:"A generative AI model wrote or edited portions of this file with the supervision of a human developer and careful human review."}},__svelteCsf:{rawCode:`<DatawrapperIframe
  {...args}
  onregionclick={(event) => (test = event.detail.data.fips)}
  onregionmouseenter={(event) => (test = event.detail.data.fips)}
  onregionmouseleave={() => (test = "Hover over a region to change this text")}
  onvisrendered={() => {}}
/>
<p>{test}</p>`}}}),v()}i.__docgen={data:[],name:"DatawrapperIframe.stories.svelte"};const L=T(i,C),W=["Default"],Z={...L.Default,tags:["svelte-csf-v5"]};export{Z as Default,W as __namedExportsOrder,C as default};
