import{a9 as ke,p as ge,aa as be,i as r,a8 as me,w as C,x as ve,k as H,t as G,Y as h,b as k,d as we,ab as xe,ac as g,y as _e,z as Fe,a7 as E,a as R,B as Se,a6 as Ve,g as i,h as b}from"./iframe-DkBoYltS.js";import{e as Oe,i as je}from"./each-BeOUnWnH.js";import{s}from"./attributes-DhG7CSOU.js";import{s as Le}from"./class-B9SFUanI.js";import{s as B}from"./style-CNURdi_Z.js";import{i as Pe}from"./lifecycle-BcE5ET0k.js";import{u as w}from"./urbanColors-BkxYcPwH.js";import{g as We,r as x,a as Ae,b as Ce,c as Ge,d as D}from"./lib-Df5Wr_Yk.js";var Ee=H("<circle></circle>"),Re=H('<g class="point-layer map-layer svelte-149ch8y"></g>');function Be(M,t){const q=ke(t);ge(t,!1);const[c,z]=xe(),_=()=>g(J,"$projection",c),m=()=>g(U,"$transform",c),I=()=>g(T,"$globalFeatures",c),N=()=>g(Q,"$stickyHighlight",c),F=Fe(),{projection:J,features:T,transform:U,handleLayerClick:Y,handleLayerMousemove:K,stickyHighlight:Q}=be("map");let X=r(t,"features",8,void 0),Z=r(t,"fill",24,()=>w.white),S=r(t,"hoverFill",8,void 0),$=r(t,"naFill",24,()=>w.gray_shade_light),ee=r(t,"stroke",24,()=>w.black),te=r(t,"hoverStroke",8,void 0),V=r(t,"strokeWidth",8,0),ie=r(t,"hoverStrokeWidth",8,void 0),v=r(t,"r",8,4),ae=r(t,"opacity",8,1),ne=r(t,"ariaRole",8,void 0),u=r(t,"ariaLabel",8,void 0),re=r(t,"highlightFeature",8,void 0),se=r(t,"pointerEvents",8,!0),O=r(t,"tooltip",8,!1);const f=me();function oe(a){return typeof u()=="string"||typeof u()>"u"?u():u()(a)}function le(a){return typeof v()=="number"?v():v()(a)}function de(a,n){x(a.target),O()&&K(D(a,n)),f("mousemove",{e:a,props:n.properties})}function ce(a,n){x(a.target),O()&&Y(D(a,n)),f("click",{e:a,props:n.properties})}C(()=>_(),()=>{_e(F,We(_()))}),C(()=>x,()=>{}),ve(),Pe();var l=Re();let j;Oe(l,5,()=>X()||I(),je,(a,n)=>{var L=E();const y=b(()=>{const[o,e]=i(F).centroid(i(n));return{x:o,y:e}}),P=b(()=>Ge(i(n),ee())),W=b(()=>Ce(i(n),Z(),$()));var ue=R(L);{var fe=o=>{var e=E(),p=R(e);Ve(p,t,"default",{get feature(){return i(n)},get x(){return i(y).x},get y(){return i(y).y}},null),k(o,e)},ye=o=>{var e=Ee();let p,A;G((d,pe,he)=>{p=Le(e,0,"point-feature svelte-149ch8y",null,p,d),s(e,"role",ne()),s(e,"label",pe),s(e,"cx",i(y).x),s(e,"cy",i(y).y),s(e,"opacity",ae()),s(e,"fill",i(W)),s(e,"r",he),s(e,"stroke-width",V()/m().k),s(e,"stroke",i(P)),A=B(e,"",A,{"--hover-fill":S()||i(W),"--hover-stroke":te()||i(P)})},[()=>({highlight:Ae(i(n),N(),re()),"hover-fill":typeof S()<"u"}),()=>oe(i(n)),()=>le(i(n))/m().k],b),h("mousemove",e,d=>de(d,i(n))),h("click",e,d=>ce(d,i(n))),k(o,e)};Se(ue,o=>{q.default?o(fe):o(ye,!1)})}k(a,L)}),G(()=>j=B(l,"",j,{"pointer-events":se()?"auto":"none","--hover-stroke-width":`${(ie()||V())/m().k}px`})),h("mouseout",l,a=>f("mouseout")),h("blur",l,a=>f("mouseout")),k(M,l),we(),z()}Be.__docgen={data:[{name:"features",visibility:"public",description:"A list of GeoJSON features. By default this component will render the features set in the parent SVGMap, but if `features` is defined, it plots those instead. Points are rendered as SVG `circle` elements by default. Polygon features are converted to points with `d3.geoPath().centroid`.\n[features]",keywords:[],kind:"let",type:{kind:"type",type:"array",text:"any[]"},static:!1,readonly:!1},{name:"fill",visibility:"public",description:`A color string or a function that takes a feature and returns a color string. Use in combination with a D3 scale for a dynamic color encoding.
[fill = urbanColors.blue] A string or function that returns a string to use as this layers fill color.`,keywords:[],kind:"let",type:{kind:"function",text:"(Object: any) => string"},static:!1,readonly:!1,defaultValue:"..."},{name:"hoverFill",visibility:"public",description:"Optional color to use for a feature's fill when hovered",keywords:[],kind:"let",type:{kind:"type",type:"string",text:"string"},static:!1,readonly:!1},{name:"naFill",visibility:"public",description:"Color to use for values that are NA or otherwise undefined in the color scale",keywords:[],kind:"let",type:{kind:"type",type:"string",text:"string"},static:!1,readonly:!1,defaultValue:"..."},{name:"stroke",visibility:"public",description:`A color string or a function that takes a feature and returns a color string
[fill = urbanColors.blue] A string or function that returns a string to use as this layers stroke color.`,keywords:[],kind:"let",type:{kind:"function",text:"(Object: any) => string"},static:!1,readonly:!1,defaultValue:"..."},{name:"hoverStroke",visibility:"public",description:"Optional color string for hovered feature stroke",keywords:[],kind:"let",type:{kind:"type",type:"string",text:"string"},static:!1,readonly:!1},{name:"strokeWidth",visibility:"public",description:`Stroke width of each feature
[strokeWidth = 0.5]`,keywords:[],kind:"let",type:{kind:"type",type:"number",text:"number"},static:!1,readonly:!1,defaultValue:"0"},{name:"hoverStrokeWidth",visibility:"public",description:`Stroke width of each feature when hovered
[strokeWidth = undefined]`,keywords:[],kind:"let",type:{kind:"type",type:"number",text:"number"},static:!1,readonly:!1},{name:"r",visibility:"public",description:"Function or static value to use for radius of circle",keywords:[],kind:"let",type:{kind:"union",type:[{kind:"type",type:"number",text:"number"},{kind:"function",text:"(Object: any) => number"}],text:"number | (Object: any) => number"},static:!1,readonly:!1,defaultValue:"4"},{name:"opacity",visibility:"public",description:"Opacity of point circles",keywords:[],kind:"let",type:{kind:"type",type:"number",text:"number"},static:!1,readonly:!1,defaultValue:"1"},{name:"ariaRole",visibility:"public",description:`Optional aria role string to be applied to each feature. Defaults to no role, assuming that SVG is hidden from the accessiblity tree.
[ariaRole = undefined]`,keywords:[],kind:"let",type:{kind:"type",type:"string",text:"string"},static:!1,readonly:!1},{name:"ariaLabel",visibility:"public",description:"Optional aria label string or function to be applied to each feature. Defaults to no label, assuming that SVG is hidden from the accessiblity tree. If a function is passed, it should take a `feature` as an argument and return a label string.\n[ariaLabel = undefined]",keywords:[],kind:"let",type:{kind:"union",type:[{kind:"type",type:"string",text:"string"},{kind:"function",text:"(Object: any) => string"}],text:"string | (Object: any) => string"},static:!1,readonly:!1},{name:"highlightFeature",visibility:"public",description:"Optional object that will be compared with each `feature` displayed in the layer. If all of the key/value pairs in `highlightFeature` are equal to the properties of a given `feature`, set that `feature` to a highlighted state.",keywords:[],kind:"let",type:{kind:"type",type:"object",text:"{ string: any; }"},static:!1,readonly:!1},{name:"pointerEvents",visibility:"public",description:`Boolean that determines if this layer should respond to pointer events and dispatch events.
[pointerEvents = true]`,keywords:[],kind:"let",type:{kind:"type",type:"boolean",text:"boolean"},static:!1,readonly:!1,defaultValue:"true"},{name:"tooltip",visibility:"public",description:`Boolean that determines if this layer should populate the tooltip slot when interacted with.
[tooltip = false]`,keywords:[],kind:"let",type:{kind:"type",type:"boolean",text:"boolean"},static:!1,readonly:!1,defaultValue:"false"}],name:"SVGPointLayer.svelte"};export{Be as S};
