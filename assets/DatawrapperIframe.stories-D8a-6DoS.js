import{S as T,i as z,s as y,c as u,a as h,m as g,t as v,b as _,d as w,o as S}from"./index-Dy1J9qof.js";import{s as b,c as D,i as $,d,e as A,t as E,a as C,b as H,g as L,k as j,l as q,y as c}from"./lifecycle-mCW1c9RL.js";import{g as M,a as U}from"./spread-CgU5AtxT.js";import{D as k}from"./DatawrapperIframe-DXnIm9vI.js";import{p as x,T as O,S as P}from"./collect-stories-DS3D1-He.js";const R='Datawrapper iframe with [event dispatching](https://developer.datawrapper.de/docs/listening-to-chart-interaction-events) enabled. All interaction events are accessible via `on:eventname` (**no periods**) on the `DatawrapperIframe` Svelte component itself. The complete event list and associated descriptions can be found [here](https://developer.datawrapper.de/docs/listening-to-chart-interaction-events#visualization-events).\n\nExamples of how to setup "switching" between Datawrapper charts with a dropdown or button controls can be found [in the Examples section here](/docs/examples-datawrapper-switching--docs).\n\nIn April 2024, the `vis.rendered` event was added to the Datawrapper event list (per the Urban team\'s request) in order to track when a visualization had been rendered/painted on the page. This is useful if there is a longer loading visualization (like a large map) and you\'d like to indicate to the user that the visualization is still loading.\n\nThe `startrender` event is available via the component\'s `beforeUpdate()` function in order to track when the iframe starts to load. This can be combined with the `vis.rendered` event to track when the visualization has been rendered/painted on the page in combination with the [LoadingWrapper](/docs/components-loadingwrapper--docs) component.\n\n```js\nimport { DatawrapperIframe } from "@urbaninstitute/dataviz-components";\n```\n';function W(r){let t,o,n,i,e;const s=[r[8]];let m={};for(let a=0;a<s.length;a+=1)m=S(m,s[a]);return t=new k({props:m}),t.$on("regionclick",r[1]),t.$on("regionmouseenter",r[2]),t.$on("regionmouseleave",r[3]),t.$on("regionclick",r[4]),t.$on("regionmouseenter",r[5]),t.$on("regionmouseleave",r[6]),t.$on("visrendered",r[7]),{c(){u(t.$$.fragment),o=b(),n=A("p"),i=E(r[0])},l(a){h(t.$$.fragment,a),o=D(a),n=C(a,"P",{});var p=H(n);i=L(p,r[0]),p.forEach(d)},m(a,p){g(t,a,p),$(a,o,p),$(a,n,p),j(n,i),e=!0},p(a,p){const f=p&256?M(s,[U(a[8])]):{};t.$set(f),(!e||p&1)&&q(i,a[0])},i(a){e||(v(t.$$.fragment,a),e=!0)},o(a){_(t.$$.fragment,a),e=!1},d(a){a&&(d(o),d(n)),w(t,a)}}}function X(r){let t,o,n,i;return t=new O({props:{$$slots:{default:[W,({args:e})=>({8:e}),({args:e})=>e?256:0]},$$scope:{ctx:r}}}),n=new P({props:{name:"Default",args:{title:"This is a title for the visualization",ariaLabel:"This is an accessible title for the visualization",datawrapperId:"RMnkX"}}}),{c(){u(t.$$.fragment),o=b(),u(n.$$.fragment)},l(e){h(t.$$.fragment,e),o=D(e),h(n.$$.fragment,e)},m(e,s){g(t,e,s),$(e,o,s),g(n,e,s),i=!0},p(e,[s]){const m={};s&769&&(m.$$scope={dirty:s,ctx:e}),t.$set(m)},i(e){i||(v(t.$$.fragment,e),v(n.$$.fragment,e),i=!0)},o(e){_(t.$$.fragment,e),_(n.$$.fragment,e),i=!1},d(e){e&&d(o),w(t,e),w(n,e)}}}const B={title:"Components/DatawrapperIframe",component:k,tags:["autodocs"],parameters:{docs:{description:{component:R}},githubLink:{url:"/DatawrapperIframe/DatawrapperIframe.svelte"}}};function F(r,t,o){let n;function i(l){c.call(this,r,l)}function e(l){c.call(this,r,l)}function s(l){c.call(this,r,l)}const m=l=>o(0,n=l.detail.data.fips),a=l=>o(0,n=l.detail.data.fips),p=()=>o(0,n="Hover over a region to change this text");function f(l){c.call(this,r,l)}return o(0,n="Hover over a region to change this text"),[n,i,e,s,m,a,p,f]}class G extends T{constructor(t){super(),z(this,t,F,X,y,{})}}const I=x(G,{meta:{title:"Components/DatawrapperIframe",tags:["autodocs"]},stories:{"tpl:default":{name:"default",template:!0,source:`<DatawrapperIframe
  {...args}
  on:regionclick
  on:regionmouseenter
  on:regionmouseleave
  on:regionclick={(e) => (test = e.detail.data.fips)}
  on:regionmouseenter={(e) => (test = e.detail.data.fips)}
  on:regionmouseleave={() => (test = "Hover over a region to change this text")}
  on:visrendered
/>
<p>{test}</p>`,hasArgs:!0},Default:{name:"Default",template:!1,source:"",hasArgs:!1}},allocatedIds:["default","Story","Template"]},B),Y=I.meta,Z=["Default"],ee=I.stories.Default;export{ee as Default,Z as __namedExportsOrder,Y as default};
